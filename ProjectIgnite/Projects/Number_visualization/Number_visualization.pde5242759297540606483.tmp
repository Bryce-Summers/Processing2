void setup()
{
  // Call this first to set the width and height variables to the correct sizes.
  //fullScreen();
  //size(512, 512);
  size(1200, 600);  
}


void draw()
{

  PGraphics g = createGraphics(width, height);
  g.beginDraw();

  float size = height/4;
  float inc = width/30;
  g.strokeWeight(2);
  int i = 0;
  for(int x = (int)inc/2; x < width; x += inc)
  {
    
    int weight = 2;
    if(i % 2 == 0){weight += 2;};
    if(i % 4 == 0){weight += 2;};
    
    g.strokeWeight(weight);
    drawNumber(x, size, X(x, size), inc/3, g);
    drawNumber(x, size*3, f(X(x, size)), inc/2, g);
    
    i++;
  }
    
  
  g.endDraw();
  image(g, 0, 0); 
  
  g.save("output.png");
  noLoop();
  
  
}

// The transformation function.
float f(float x)
{
  return .25*(x + width/2);
}

float X(float x, float size)
{
 return (x - width/2)*1.0/(width/2)*size; 
}

void drawNumber(float x, float y, float mag, float head_len, PGraphics g)
{
  drawArrow(x, y, x, y - mag, head_len, g);
}

void drawArrow(float x1, float y1, float x2, float y2, float head_length, PGraphics g)
{
  g.line(x1, y1, x2, y2);
  
  float dx = x2 - x1;
  float dy = y2 - y1;
  float mag = dist(x1, y1, x2, y2);
  
  float par_x = dx/mag;
  float par_y = dy/mag;
  
  float perp_x = -par_y;
  float perp_y =  par_x;

  // Draw one of the arrow heads.
  g.line(x2, y2, x2 - par_x*head_length + perp_x*head_length,
    y2 - par_y*head_length + perp_y*head_length);
    
  // Draw the other.
  g.line(x2, y2, x2 - par_x*head_length - perp_x*head_length,
                 y2 - par_y*head_length - perp_y*head_length);
}

void keyPressed()
{
  
  // If the user presses space, then this program will save a nice transparent image of the fractal in the local file output.png.
  if (key == ' ')
  {
    save("output.png");
    
  }
  
  
}